# -*- coding: utf-8 -*-
"""encrypt-face-id.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uxX2SjvhDjV7Ud7uh7u2PbvEQ8mXlTs7
"""

!apt-get install -y --fix-missing \
    build-essential \
    cmake \
    gfortran \
    git \
    wget \
    curl \
    graphicsmagick \
    libgraphicsmagick1-dev \
    libatlas-base-dev \
    libavcodec-dev \
    libavformat-dev \
    libgtk2.0-dev \
    libjpeg-dev \
    liblapack-dev \
    libswscale-dev \
    pkg-config \
    python3-dev \
    python3-numpy \
    software-properties-common \
    zip \
    && apt-get clean && rm -rf /tmp/* /var/tmp/*

!cd ~ && \
    mkdir -p dlib && \
    git clone -b 'v19.9' --single-branch https://github.com/davisking/dlib.git dlib/ && \
    cd  dlib/ && \
    python3 setup.py install --yes USE_AVX_INSTRUCTIONS

from google.colab import drive
drive.mount('/content/drive')

!git clone https://github.com/davisking/dlib.git
!cd dlib
!mkdir build; cd build; cmake ..; cmake --build .
!cd ..
!python3 setup.py install
!pip install cmake
!pip install face_recognition cryptography
!pip install pypng
!pip install pyzbar
!sudo apt-get install libzbar0
!pip install face_recognition pyqrcode

import numpy as np
import matplotlib.pyplot as plt
import cv2
from cryptography.fernet import Fernet
import pyqrcode
import face_recognition
from PIL import Image
from pyzbar.pyzbar import decode

robustness = 3
def gen_qrcode(pic_path, public_key):
    pic = face_recognition.load_image_file(pic_path)
    pic_encoding = face_recognition.face_encodings(pic)[0]
    low_res_enc = np.around(pic_encoding,robustness)
    f = Fernet(public_key)
    token = f.encrypt(str.encode(''.join(str(e) for e in low_res_enc)))
    code = pyqrcode.create(token)
    #code.svg('code.svg', scale=4, background="white", module_color="#7D007D")
    code.png('code.png', scale=6)

def decode_qr(qr_code_path):
    qcode = cv2.imread(qr_code_path)	
    return decode(qcode)[0][0]

def decode_encrypted(encod_str, public_key):
    f = Fernet(public_key)
    return f.decrypt(encod_str)

def check_match(qr_face, current_image_path):
    pic = face_recognition.load_image_file(current_image_path)
    pic_encoding = face_recognition.face_encodings(pic)[0]
    st = qr_face.decode()
    k = ''
    t=False
    for e in st:
        if e=='-':
            k+=';'
            t=True
        elif e=='.':
            if t==True: t=False
            else: k+=';'
        k+=e
    if k[0]==';':k=k[1:]
    if k[-1]==';':k=k[:-1]
    qr_face_encoding = np.fromstring(k, sep=';')
    return face_recognition.compare_faces([qr_face_encoding],pic_encoding, tolerance=0.5)

gen_qrcode("pic.jpg", key)

qrscan = decode_qr("code.png")

pl = decode_encrypted(qrscan, key)

check_match(pl, "pic2.jpg")